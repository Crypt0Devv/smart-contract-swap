#include "imports/stdlib.fc";
#include "imports/constants.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; recent_sender (initially set to config.address)
        ds~load_msg_addr()  ;; owner_address
    );
}


() save_data(slice recent_sender, slice owner_address) impure inline {
    set_data(begin_cell()
        .store_slice(recent_sender)
        .store_slice(owner_address)
        .end_cell());
}


() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    (slice recent_sender, slice owner_address) = load_data();

    if (op == op::deposit()) { ;; deposit
        save_data(sender_address, owner_address);
        return();
    }

    if (op == op::withdraw()) { ;; withdraw
        throw_unless(403, equal_slice_bits(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdraw_amount);

        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

        int msg_mode = 1; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        send_raw_message(msg.end_cell(), msg_mode);

        return();
    }

    if (op == op::change_admin()) { ;; change admin
        throw_unless(403, equal_slice_bits(sender_address, owner_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(sender_address, new_admin_address);
        return ();
    }

    throw(777);
}

(slice, slice) get_contract_storage_data() method_id {
    var (recent_sender, owner_address) = load_data();
    return (
        recent_sender,
        owner_address
    );
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}